// src/pages/products/ProductList.jsx
import { useState, useEffect, useMemo } from 'react';
import { message, Form, Input, Select, Space, InputNumber, Pagination, Button } from 'antd';

import { useSearchParams } from "react-router-dom";
import { FiFilter, FiX } from 'react-icons/fi';
import api from '../../utils/api';
import BrandSelect from '../../components/form/BrandSelect';
import ProductCard from '../../components/common/ProductCard';

const { Option } = Select;

// üîπ hook ‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debounce ‡∏Ñ‡πà‡∏≤
function useDebounce(value, delay = 400) {
  const [v, setV] = useState(value);
  useEffect(() => {
    const t = setTimeout(() => setV(value), delay);
    return () => clearTimeout(t);
  }, [value, delay]);
  return v;
}

// üîπ helper: ‡∏•‡∏ö key ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô null/''/undefined
function pickTruthy(obj) {
  return Object.fromEntries(
    Object.entries(obj).filter(([, v]) => v !== undefined && v !== null && v !== '')
  );
}

// üîπ helper: ‡πÅ‡∏õ‡∏•‡∏á search params ‡πÄ‡∏õ‡πá‡∏ô filters
const parseFiltersFromSearch = (searchParams) => ({
  category: searchParams.get('category') || '',
  brand: searchParams.get('brand') || '',
  rarity: searchParams.get('rarity') || '',
  condition: searchParams.get('condition') || '',
  // tags ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á "a,b,c" ‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πâ‡∏≥‡πÜ‡∏´‡∏•‡∏≤‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ?tags=a&tags=b
  tags: (() => {
    const multi = searchParams.getAll('tags');
    if (multi && multi.length > 1) return multi;
    const single = searchParams.get('tags');
    return single ? single.split(',').filter(Boolean) : [];
  })(),
  minPrice: searchParams.get('minPrice') ? Number(searchParams.get('minPrice')) : null,
  maxPrice: searchParams.get('maxPrice') ? Number(searchParams.get('maxPrice')) : null,
  q: searchParams.get('q') || '',
});

export default function ProductList() {
  const [products, setProducts] = useState([]);
  const [brands, setBrands] = useState([]);
  const [availableTags, setAvailableTags] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchParams, setSearchParams] = useSearchParams();

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState({
    category: '',
    brand: '',
    rarity: '',
    condition: '',
    tags: [],
    minPrice: null,
    maxPrice: null,
  });

  // ‡πÄ‡∏û‡∏à‡∏´‡∏ô‡πâ‡∏≤ (client-side)
  const [currentPage, setCurrentPage] = useState(1);
  const productsPerPage = 20;

  // ‚úÖ debounce ‡∏ó‡∏±‡πâ‡∏á filters ‡πÅ‡∏•‡∏∞ query
  const debouncedFilters = useDebounce(filters, 400);
  const debouncedQuery = useDebounce(searchQuery, 400);

  // options
  const categories = [
    { label: 'Figure', value: 'Figure' },
    { label: 'Action Figure', value: 'Action Figure' },
    { label: 'Blind Box', value: 'Blind Box' },
    { label: 'Plush Toys', value: 'Plush Toys' },
    { label: 'Art Work', value: 'Art Work' },
    { label: 'OTHER', value: 'OTHER' },
  ];
  const conditions = [
    { label: 'Pre-owned', value: 'Pre-owned' },
    { label: 'Brand New', value: 'Brand New' },
  ];
  const rarityOptions = [
    { label: 'Common', value: 'Common' },
    { label: 'Secret', value: 'Secret' },
    { label: 'Limited Edition', value: 'Limited' },
  ];
  const initialFilters = {
    category: '',
    brand: '',
    rarity: '',
    condition: '',
    tags: [],
    minPrice: null,
    maxPrice: null,
  };

  // UI: mobile filter drawer
  const [showFilters, setShowFilters] = useState(false);

  // ‡πÇ‡∏´‡∏•‡∏î brands/tags ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  useEffect(() => {
    (async () => {
      try {
        const [brandRes, tagRes] = await Promise.all([api.get('/api/brand'), api.get('/api/tags')]);
        setBrands(Array.isArray(brandRes.data) ? brandRes.data : []);
        setAvailableTags(Array.isArray(tagRes.data) ? tagRes.data : []);
      } catch (err) {
        console.error(err);
        message.error('‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå/‡πÅ‡∏ó‡πá‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    })();
  }, []);
  // Sync filters <-> URL search params
   useEffect(() => {
    const next = parseFiltersFromSearch(searchParams);
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡πâ‡∏á filters ‡πÅ‡∏•‡∏∞ searchQuery ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ q
    setFilters(prev => ({ ...prev, ...next, q: undefined }));
    if (next.q !== undefined) setSearchQuery(next.q);
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ 1
    setCurrentPage(1);
  }, [searchParams]);
  // ‚úÖ ‡∏¢‡∏¥‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‚Äú‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà debounce ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‚Äù + ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Å‡πà‡∏≤
  useEffect(() => {
    const controller = new AbortController();

    (async () => {
      setLoading(true);
      try {
        const params = new URLSearchParams(
          pickTruthy({
            category: debouncedFilters.category,
            brand: debouncedFilters.brand,
            rarity: debouncedFilters.rarity,
            condition: debouncedFilters.condition,
            tags: debouncedFilters.tags?.length ? debouncedFilters.tags.join(',') : undefined,
            minPrice:
              debouncedFilters.minPrice !== null ? String(debouncedFilters.minPrice) : undefined,
            maxPrice:
              debouncedFilters.maxPrice !== null ? String(debouncedFilters.maxPrice) : undefined,
            // q: debouncedQuery || undefined, // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ server-side ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
          })
        ).toString();

        const res = await api.get(`/api/products/published?${params}`, {
          signal: controller.signal,
        });

        const list = Array.isArray(res.data?.items || res.data) ? (res.data.items || res.data) : [];
        setProducts(list);
        setCurrentPage(1);
        // console.log('Loaded products:', list);
      } catch (err) {
        if (err.name !== 'CanceledError' && err.name !== 'AbortError') {
          console.error('Error fetching products:', err);
          message.error('‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        }
      } finally {
        setLoading(false);
      }
    })();

    return () => controller.abort();
  }, [debouncedFilters /*, debouncedQuery */]);

  // üîé filter ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ù‡∏±‡πà‡∏á client
  const filteredProducts = useMemo(() => {
    if (!debouncedQuery) return products;
    const q = debouncedQuery.toLowerCase();
    return products.filter((p) => {
      const title = (p.title || p.name || '').toLowerCase();
      return title.includes(q);
    });
  }, [products, debouncedQuery]);

  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const totalPages = Math.ceil(filteredProducts.length / productsPerPage) || 1;

  // ‡∏Å‡∏±‡∏ô currentPage ‡πÄ‡∏Å‡∏¥‡∏ô
  useEffect(() => {
    if (currentPage > totalPages) setCurrentPage(1);
  }, [currentPage, totalPages]);

  const handleFilterChange = (key, value) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
  };

  const handleResetFilters = () => {
    setSearchQuery('');
    setFilters(initialFilters);
    setCurrentPage(1);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const isPristine =
    !searchQuery &&
    !filters.category &&
    !filters.brand &&
    !filters.rarity &&
    !filters.condition &&
    (!filters.tags || filters.tags.length === 0) &&
    filters.minPrice == null &&
    filters.maxPrice == null;

  return (
    <div className="min-h-screen bg-yellow-100 text-gray-900">
      {/* Header Section */}
      <div className="sticky top-16 z-30 bg-yellow-100/80 backdrop-blur supports-[backdrop-filter]:bg-yellow-100/70 border-b border-yellow-200">
        <div className="max-w-7xl mx-auto px-4 md:px-6 py-3 flex items-center justify-between">
          <div>
            <h1 className="text-xl md:text-2xl font-bold">Product List</h1>
            <p className="text-sm text-gray-600">
              ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î <span className="font-medium text-yellow-700">{filteredProducts.length}</span> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </p>
          </div>
          {/* Mobile filter toggle */}
          <button
            className="md:hidden inline-flex items-center gap-2 px-3 py-2 rounded-lg bg-yellow-300 hover:bg-yellow-400 text-black transition"
            onClick={() => setShowFilters((s) => !s)}
          >
            {showFilters ? <FiX /> : <FiFilter />}
            ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
          </button>
        </div>
      </div>
      <div className="max-w-8xl mx-auto px-4 md:px-6 py-6 grid grid-cols-1 md:grid-cols-4 gap-6">
        {/* Sidebar (responsive) */}
        <div
          className={[
            "bg-white rounded-xl shadow-sm border border-yellow-200 h-full overflow-y-auto min-h-0",
            "p-4 md:p-5",
            "md:sticky md:top-28 md:self-start",
            // mobile drawer
            "md:block",
            showFilters ? "block" : "hidden",
          ].join(" ")}
        >
          <aside className="md:col-span-1 sticky top-16 h-full">
            <div className="h-full overflow-y-auto min-h-0 pr-2">
              <Form layout="vertical" className="space-y-3">
                <Form.Item label={<span className="font-semibold text-yellow-800">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span>}>
                  <Input
                    placeholder="Search products..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    allowClear
                    className="rounded-lg border-yellow-200 focus:border-yellow-400 focus:ring-2 focus:ring-yellow-300"
                  />
                </Form.Item>

                <Form.Item label={<span className="font-semibold text-yellow-800">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</span>}>
                  <Select
                    value={filters.category}
                    onChange={(v) => handleFilterChange('category', v)}
                    placeholder="All Categories"
                    allowClear
                    className="w-full"
                  >
                    {categories.map((cat) => (
                      <Option key={cat.value} value={cat.value}>
                        {cat.label}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>

                <Form.Item label={<span className="font-semibold text-yellow-800">‡∏™‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</span>}>
                  <Select
                    value={filters.condition}
                    onChange={(v) => handleFilterChange('condition', v)}
                    placeholder="All Conditions"
                    allowClear
                  >
                    {conditions.map((cond) => (
                      <Option key={cond.value} value={cond.value}>
                        {cond.label}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>

                <Form.Item label={<span className="font-semibold text-yellow-800">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å</span>}>
                  <Select
                    value={filters.rarity}
                    onChange={(v) => handleFilterChange('rarity', v)}
                    placeholder="All Rarities"
                    allowClear
                  >
                    {rarityOptions.map((r) => (
                      <Option key={r.value} value={r.value}>
                        {r.label}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>

                <Form.Item label={<span className="font-semibold text-yellow-800">‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå</span>}>
                  <BrandSelect
                    brands={brands}
                    selectedBrand={filters.brand}
                    onChange={(v) => handleFilterChange('brand', v)}
                  />
                </Form.Item>

                <Form.Item label={<span className="font-semibold text-yellow-800">Tags</span>}>
                  <Select
                    mode="multiple"
                    placeholder="Select tags"
                    value={filters.tags}
                    onChange={(v) => handleFilterChange('tags', v)}
                    allowClear
                  >
                    {availableTags.map((tag) => (
                      <Option key={tag._id} value={tag.name}>
                        {tag.name}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>

                <Form.Item label={<span className="font-semibold text-yellow-800">‡∏£‡∏≤‡∏Ñ‡∏≤</span>}>
                  <div className="flex gap-2">
                    <InputNumber
                      className="flex-1"
                      placeholder="‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"
                      value={filters.minPrice}
                      onChange={(v) => handleFilterChange('minPrice', v ?? null)}
                      formatter={(v) =>
                        v !== null && v !== undefined
                          ? `‡∏ø${String(v).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}`
                          : ''
                      }
                      parser={(v) => (v ? v.replace(/‡∏ø\s?|(,*)/g, '') : '')}
                    />
                    <InputNumber
                      className="flex-1"
                      placeholder="‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
                      value={filters.maxPrice}
                      onChange={(v) => handleFilterChange('maxPrice', v ?? null)}
                      formatter={(v) =>
                        v !== null && v !== undefined
                          ? `‡∏ø${String(v).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}`
                          : ''
                      }
                      parser={(v) => (v ? v.replace(/‡∏ø\s?|(,*)/g, '') : '')}
                    />
                  </div>
                </Form.Item>

                <Form.Item>
                  <Space className="w-full justify-between">
                    <Button onClick={handleResetFilters} danger ghost>
                      ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤
                    </Button>
                    <Button
                      type="primary"
                      onClick={() => setShowFilters(false)}
                      className="bg-yellow-400 hover:bg-yellow-500 border-none"
                    >
                      ‡∏õ‡∏¥‡∏î
                    </Button>
                  </Space>
                  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢) */}
                  {!isPristine && (
                    <div className="mt-3 text-xs text-gray-600">
                      ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‚Ä¢{' '}
                      <button
                        onClick={handleResetFilters}
                        className="underline text-yellow-700 hover:text-yellow-800"
                      >
                        ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                      </button>
                    </div>
                  )}
                </Form.Item>
              </Form>
            </div>
          </aside>
        </div>

        {/* Main */}
        <div className="md:col-span-3">
          {/* ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå + ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ */}
          <div className="mb-4 flex items-center justify-between">
            <div className="hidden md:block text-sm text-gray-600">
              ‡∏û‡∏ö {filteredProducts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </div>
            <div className="md:hidden">
              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UX) */}
              <button
                className="inline-flex items-center gap-2 px-3 py-2 rounded-lg bg-yellow-300 hover:bg-yellow-400 text-black transition"
                onClick={() => setShowFilters(true)}
              >
                <FiFilter /> ‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
              </button>
            </div>
          </div>

          {loading ? (
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-12 w-12 border-4 border-yellow-500 border-t-transparent" />
            </div>
          ) : filteredProducts.length === 0 ? (
            <div className="bg-white border border-yellow-200 rounded-xl py-14 text-center">
              <div className="text-lg font-medium text-gray-700">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
              <div className="text-sm text-gray-500 mt-1">
                ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà
              </div>
              <Button
                className="mt-4 bg-yellow-400 hover:bg-yellow-500 border-none"
                type="primary"
                onClick={handleResetFilters}
              >
                ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
              </Button>
            </div>
          ) : (
            <div className="flex flex-col">
              {/* ‡∏õ‡∏£‡∏±‡∏ö grid ‡πÉ‡∏´‡πâ responsive ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô */}
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-8">
                {filteredProducts
                  .slice((currentPage - 1) * productsPerPage, currentPage * productsPerPage)
                  .map((product) => (
                    <ProductCard key={product._id} product={product} />
                  ))}
              </div>

              <div className="flex justify-center mt-auto pb-4">
                <Pagination
                  current={currentPage}
                  total={filteredProducts.length}
                  pageSize={productsPerPage}
                  onChange={(page) => {
                    setCurrentPage(page);
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                  }}
                  showSizeChanger={false}
                />
              </div>
            </div>
          )}
        </div>
      </div>
      </div>
  );
}
